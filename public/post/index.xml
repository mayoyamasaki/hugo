<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Mayo&#39;s Blog</title>
    <link>https://mayoyamasaki.github.io/post/</link>
    <description>Recent content in Posts on Mayo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 18 Nov 2016 00:04:32 +0900</lastBuildDate>
    <atom:link href="https://mayoyamasaki.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>K-Means Clustering of Word2Vec on Python</title>
      <link>https://mayoyamasaki.github.io/content/post/kmeans%20clustering%20of%20word2vec%20on%20python/</link>
      <pubDate>Fri, 18 Nov 2016 00:04:32 +0900</pubDate>
      
      <guid>https://mayoyamasaki.github.io/content/post/kmeans%20clustering%20of%20word2vec%20on%20python/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;scikit-learnのK-Means実装を使って、学習済みWord2Vecのクラスタリングを行った。&lt;/li&gt;
&lt;li&gt;それなりに上手く、クラスタリングできていそうだった。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;ACL2014で、EmbeddingsのクラスタをNER(Named Entity Recognition)に使用している論文がある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;br /&gt;
線形モデルには、低次元連続値の素性(特徴量)より、高次元離散値の素性が良いらしい。&lt;br /&gt;
この記事では、Word2Vecで学習した単語ベクトル表現(連続値)を使って、K-Meansによるクラスタリング(離散値)を行ってみる。&lt;/p&gt;

&lt;h2 id=&#34;設定&#34;&gt;設定&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://code.google.com/archive/p/word2vec/&#34;&gt;Google Code word2vec&lt;/a&gt;にて公開されている、GoogleNews-vectors-negative300.bin.gzを入力に用いた。&lt;/li&gt;
&lt;li&gt;PyPIで公開されている&lt;a href=&#34;https://github.com/danielfrg/word2vec&#34;&gt;word2vec&lt;/a&gt;がTypeErrorで上手くモデルファイルをロードできなかったので、gensimの実装を使った。&lt;/li&gt;
&lt;li&gt;K-Meansには、データ量が大きかったので、scikit-learnの&lt;a href=&#34;http://scikit-learn.org/stable/modules/generated/sklearn.cluster.MiniBatchKMeans.html#sklearn.cluster.MiniBatchKMeans.fit&#34;&gt;MiniBatchKMeans&lt;/a&gt;を用いた&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;学習済みのWord2Vecのモデルファイルはいろいろ公開されていて、3Topというstartupのまとめがよかった&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;br /&gt;
gensimのWord2Vec実装のAPIドキュメント&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;は、あんまり丁寧に書かれていないので、結構つらかった。&lt;/p&gt;

&lt;h2 id=&#34;実装&#34;&gt;実装&lt;/h2&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;argparse&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;functools&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; lru_cache
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;logging&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; getLogger

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numpy&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;np&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;gensim.models.word2vec&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; Word2Vec
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;sklearn.cluster&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; MiniBatchKMeans
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;sklearn.externals&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; joblib


logger &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; getLogger(__name__)


&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;make_dataset&lt;/span&gt;(model):
    &lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Make dataset from pre-trained Word2Vec model.&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;    Paramters&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;    ---------&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;    model: gensim.models.word2vec.Word2Vec&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;        pre-traind Word2Vec model as gensim object.&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;    Returns&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;    -------&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;    numpy.ndarray((vocabrary size, vector size))&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;        Sikitlearn&amp;#39;s X format.&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    V &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; model&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;index2word
    X &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;zeros((&lt;span style=&#34;color: #008000&#34;&gt;len&lt;/span&gt;(V), model&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vector_size))

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; index, word &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;enumerate&lt;/span&gt;(V):
        X[index, :] &lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt; model[word]
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; X


&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;train&lt;/span&gt;(X, K):
    &lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Learn K-Means Clustering with MiniBatchKMeans.&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;    Paramters&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;    ---------&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;    X: numpy.ndarray((sample size, feature size))&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;        training dataset.&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;    K: int&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;        number of clusters to use MiniBatchKMeans.&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;    Returens&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;    --------&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;    sklearn.cluster.MiniBatchKMeans&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;        trained model.&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    logger&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;start to fiting KMeans with {} classs.&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;format(K))
    classifier &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; MiniBatchKMeans(n_clusters&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;K, random_state&lt;span style=&#34;color: #666666&#34;&gt;=0&lt;/span&gt;)
    classifier&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;fit(X)
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; classifier


&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;():
    parser &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; argparse&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;ArgumentParser(
        description&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Python Word2Vec Cluster&amp;#39;&lt;/span&gt;)

    parser&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;model&amp;#39;&lt;/span&gt;,
                        action&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;store&amp;#39;&lt;/span&gt;,
                        help&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Name of word2vec binary modelfile.&amp;#39;&lt;/span&gt;)

    parser&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;-o&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;--out&amp;#39;&lt;/span&gt;,
                        action&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;store&amp;#39;&lt;/span&gt;,
                        default&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;model.pkl&amp;#39;&lt;/span&gt;,
                        help&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Set output filename.&amp;#39;&lt;/span&gt;)

    parser&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;-k&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;--K&amp;#39;&lt;/span&gt;,
                        action&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;store&amp;#39;&lt;/span&gt;,
                        &lt;span style=&#34;color: #008000&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;int&lt;/span&gt;,
                        default&lt;span style=&#34;color: #666666&#34;&gt;=500&lt;/span&gt;,
                        help&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Num of classes on KMeans.&amp;#39;&lt;/span&gt;)

    parser&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;-p&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;--pre-trained-model&amp;#39;&lt;/span&gt;,
                        action&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;store&amp;#39;&lt;/span&gt;,
                        default&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;None&lt;/span&gt;,
                        help&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Use pre-trained KMeans Model.&amp;#39;&lt;/span&gt;)

    parser&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;-w&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;--words-to-pred&amp;#39;&lt;/span&gt;,
                        action&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;store&amp;#39;&lt;/span&gt;,
                        nargs&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;,
                        &lt;span style=&#34;color: #008000&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;str&lt;/span&gt;,
                        default&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;None&lt;/span&gt;,
                        help&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;List of word to predict.&amp;#39;&lt;/span&gt;)

    args &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; parser&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;parse_args()

    model &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Word2Vec&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;load_word2vec_format(args&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;model, binary&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;True&lt;/span&gt;)

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;not&lt;/span&gt; args&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;pre_trained_model:
        X &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; make_dataset(model)
        classifier &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; train(X, args&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;K)
        joblib&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;dump(classifier, args&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;out)
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;:
        classifier &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; joblib&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;load(args&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;pre_trained_model)

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; args&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;words_to_pred:

        X &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; [model[word] &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; word &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; args&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;words_to_pred &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; word &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; model]
        classes &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; classifier&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;predict(X)

        result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; []
        i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; word &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; args&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;words_to_pred:
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; word &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; model:
                result&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color: #008000&#34;&gt;str&lt;/span&gt;(classes[i]))
                i &lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;:
                result&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color: #008000&#34;&gt;str&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;-1&lt;/span&gt;))
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;join(result))


&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    main()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;実装は、Githubに公開している通りだが、Word2Vecの辞書をNumpyのndarrayに変換するやり方が、最適ではない気がする。まあ一度だけしか実行しないので、今回は気にしない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;

&lt;h3 id=&#34;学習&#34;&gt;学習&lt;/h3&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ python3 w2vcluster/w2vcluster.py GoogleNews-vectors-negative300.bin -k &lt;span style=&#34;color: #666666&#34;&gt;500&lt;/span&gt; -o model1000.pkl
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;予測&#34;&gt;予測&lt;/h3&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;python3 w2vcluster/w2vcluster.py GoogleNews-vectors-negative300.bin -p model500.pkl -w apple Apple banana Google
&lt;span style=&#34;color: #666666&#34;&gt;176&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;118&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;176&lt;/span&gt; 118
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;argparseの可変長リストは初めて使った。見ての通り、appleとbananaはクラスタID 176に、AppleとGoogleはクラスタID 118に分類されており、上手くいっているような気がする。
モデルファイルは、joblibのpickleファイルなので、もちろんPythonからも使うことができる。やり方、READMEに一応書いている。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;MiniBatchKMeansを使うと、大規模データでもMacbook Proで問題なく計算できた(数分程度で終わるが、通常のKMeansだと終わる気配がなかった&amp;hellip;)。&lt;br /&gt;
離散化したWord2Vecを何らのモデルでつかってみたい。ソフトクラスタリングも試してみたい。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;http://aclweb.org/anthology/D/D14/D14-1012.pdf&#34;&gt;Jiang Guo et al. Revisiting Embedding Features for Simple Semi-supervised Learning&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;http://scikit-learn.org/stable/auto_examples/cluster/plot_mini_batch_kmeans.html#sphx-glr-auto-examples-cluster-plot-mini-batch-kmeans-py&#34;&gt;Comparison of the K-Means and MiniBatchKMeans clustering algorithms&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;&lt;a href=&#34;https://github.com/3Top/word2vec-api&#34;&gt;word2vec-api&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;&lt;a href=&#34;https://radimrehurek.com/gensim/models/word2vec.html&#34;&gt;models.word2vec – Deep learning with word2vec&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;&lt;a href=&#34;https://github.com/mayoyamasaki/py-kmeans-word2vec&#34;&gt;Python K-Means Cluster of Word2Vec&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Neo4j</title>
      <link>https://mayoyamasaki.github.io/content/post/introduction-to-neo4j/</link>
      <pubDate>Wed, 16 Nov 2016 00:29:37 +0900</pubDate>
      
      <guid>https://mayoyamasaki.github.io/content/post/introduction-to-neo4j/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Neo4jの公式ドキュメントを読んだので、概要をまとめた。&lt;/li&gt;
&lt;li&gt;概念、クエリ文法、Pythonドライバの使い方について解説した。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://mayoyamasaki.github.io/images/introduction-to-neo4j/neo4j_logo.png&#34; alt=&#34;Neo4j&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2016/11/15現在、Neo4jの最新版は、3系(3.0.7)で、公式サイトからdmg(Mac OSの場合)が配布されている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;br /&gt;
公式ドキュメントのv3を斜め読みしたので、簡単に解説する&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;導入&#34;&gt;導入&lt;/h2&gt;

&lt;p&gt;Neo4jはスキーマレスDBで、グラフデータの扱い特化することで、高い検索パフォーマンスを発揮している。
データは、「Node」、「Relationship」、「Propetries」で表現される。&lt;br /&gt;
下図の場合、PersonやMovieで囲まれいるオブジェクトがNodeで、Node間に貼られているエッジ(有効辺の場合は矢印)がRelationshipであり、各Nodeが所有するnameやbornなどの値がPropetriesである。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://mayoyamasaki.github.io/images/introduction-to-neo4j/graphdb-simple-labels.svg&#34; alt=&#34;Example Graph&#34; /&gt;&lt;/p&gt;

&lt;p&gt;またNodeやRelationshipには、「Label」と呼ばれる複数個付与することができる。Labelは何らかの集合を意味し、上図の場合は、PersonやMovie、ACTED_INがLabelに相当する。&lt;/p&gt;

&lt;p&gt;データはこれらの概念で表現されるが、グラフを探索する上で、「Path」と「Traversal」という概念がある。&lt;br /&gt;
Pathは、Relationshipで接続されるNodeのことで、検索結果などを表す概念である。また、Traversalは検索方法を表す概念であり、「Tom HanksというNodeとACTED_INのRelationshipにあるNode」というようなクエリのことを意味している。この場合、Forrest GumpのNodeが下図のようなPathとして返されることになる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://mayoyamasaki.github.io/images/introduction-to-neo4j/graphdb-path.svg&#34; alt=&#34;Example Path&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;入門&#34;&gt;入門&lt;/h2&gt;

&lt;h3 id=&#34;cypher&#34;&gt;Cypher&lt;/h3&gt;

&lt;p&gt;Neo4jのデータは、Cypherと呼ばれるクエリ言語用いて扱う。例えば、Pathの例であげた図のデータをCypherで表現すると次の様になる(tomやgumpはアクセス用の変数である)。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;(&lt;span style=&#34;color: #A0A000&#34;&gt;tom&lt;/span&gt;:Person     {&lt;span style=&#34;color: #A0A000&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Tom Hanks&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #A0A000&#34;&gt;born&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;1986&lt;/span&gt;})
&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;[&lt;span style=&#34;color: #A0A000&#34;&gt;role&lt;/span&gt;:ACTED_IN {&lt;span style=&#34;color: #A0A000&#34;&gt;roles&lt;/span&gt;: [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Forrest&amp;quot;&lt;/span&gt;]}] &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;
(&lt;span style=&#34;color: #A0A000&#34;&gt;gump&lt;/span&gt;:Movie     {&lt;span style=&#34;color: #A0A000&#34;&gt;title&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Forrest Gump&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #A0A000&#34;&gt;released&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;1994&lt;/span&gt;})
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;データの作成と変数&#34;&gt;データの作成と変数&lt;/h3&gt;

&lt;p&gt;CREATE文でデータの作成、RETURNで変数からデータを取得できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;CREATE (&lt;span style=&#34;color: #A0A000&#34;&gt;tom&lt;/span&gt;:Person     {&lt;span style=&#34;color: #A0A000&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Tom Hanks&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #A0A000&#34;&gt;born&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;1986&lt;/span&gt;})
&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;[&lt;span style=&#34;color: #A0A000&#34;&gt;role&lt;/span&gt;:ACTED_IN {&lt;span style=&#34;color: #A0A000&#34;&gt;roles&lt;/span&gt;: [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Forrest&amp;quot;&lt;/span&gt;]}] &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;
(&lt;span style=&#34;color: #A0A000&#34;&gt;gump&lt;/span&gt;:Movie     {&lt;span style=&#34;color: #A0A000&#34;&gt;title&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Forrest Gump&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #A0A000&#34;&gt;released&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;1994&lt;/span&gt;})
RETURN tom
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;matchによるデータの検索&#34;&gt;MATCHによるデータの検索&lt;/h3&gt;

&lt;p&gt;データ表現をMATCHに渡すことで、複雑なクエリも構築できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;MATCH (&lt;span style=&#34;color: #A0A000&#34;&gt;p&lt;/span&gt;:Person { &lt;span style=&#34;color: #A0A000&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Tom Hanks&amp;quot;&lt;/span&gt; })&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;[&lt;span style=&#34;color: #A0A000&#34;&gt;r&lt;/span&gt;:ACTED_IN]&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #A0A000&#34;&gt;m&lt;/span&gt;:Movie)
RETURN m.title, r.roles
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;データのマージ&#34;&gt;データのマージ&lt;/h3&gt;

&lt;p&gt;データやPropetriesが存在しないときだけ、その値を追加したい場合はMERGEが使える。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;MERGE (&lt;span style=&#34;color: #A0A000&#34;&gt;m&lt;/span&gt;:Movie { &lt;span style=&#34;color: #A0A000&#34;&gt;title&lt;/span&gt;:&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Cloud Atlas&amp;quot;&lt;/span&gt; })
ON CREATE SET m.released &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2012&lt;/span&gt;
RETURN m
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;結果のフィルタリング&#34;&gt;結果のフィルタリング&lt;/h3&gt;

&lt;p&gt;RDBのSQLと同じく、WHEREによる条件指定やASによるエイリアス、ORDER BYによるソートなどの機能がある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;ドライバ&#34;&gt;ドライバ&lt;/h2&gt;

&lt;p&gt;公式ドキュメントでは、C#、Java、JavaScrip、Pythonのドライバを紹介している&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;neo4j.v1&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; GraphDatabase, basic_auth

driver &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; GraphDatabase&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;driver(
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;bolt://localhost&amp;quot;&lt;/span&gt;, auth&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;basic_auth(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;neo4j&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;neo4j&amp;quot;&lt;/span&gt;), encrypted&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;True&lt;/span&gt;)

session &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; driver&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;session()

session&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;run(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;CREATE (a:Person {name:&amp;#39;Arthur&amp;#39;, title:&amp;#39;King&amp;#39;})&amp;quot;&lt;/span&gt;)

result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; session&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;run(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;MATCH (a:Person) WHERE a.name = &amp;#39;Arthur&amp;#39; &amp;quot;&lt;/span&gt;
                      &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;RETURN a.name AS name, a.title AS title&amp;quot;&lt;/span&gt;)

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; record &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; result:
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; (record[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;], record[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;]))

session&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;close()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これは、Pythonのサンプルプグラムのそのままであるが、このコードの理解だけで、問題なく利用できる。&lt;br /&gt;
さて、boltスキーマを初めて見る人が多いと思うが、Neo4jが策定したバイナリネットワークプトトコルであるとのこと&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;とりあえず基本的な内容は理解できたが、Cypherはパワフルなクエリ言語なので、全容はつかめていないが、とりあえず使う文には、難しくない様に感じた。&lt;br /&gt;
今後は、Neo4jのグラフデータを可視化するツールはいくつかあり、&lt;a href=&#34;http://www.popotojs.com/&#34;&gt;Popotojs&lt;/a&gt;が良さそうなので、これを試してみたい。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://neo4j.com/&#34;&gt;neo4j&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;https://neo4j.com/docs/developer-manual/current/&#34;&gt;The Neo4j Developer Manual v3.0&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;&lt;a href=&#34;https://neo4j.com/docs/developer-manual/current/get-started/&#34;&gt;Chapter 2. Get started&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;&lt;a href=&#34;https://neo4j.com/docs/developer-manual/current/drivers/&#34;&gt;Chapter 4. Drivers&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;&lt;a href=&#34;https://www.infoq.com/jp/news/2016/05/neo4j-3.0&#34;&gt;Neo4j 3.0がリリース，バイナリ通信プロトコルと標準ドライバを装備&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>A Benchmark of scikit-learn SVMs</title>
      <link>https://mayoyamasaki.github.io/content/post/a-benchmark-of-scikit-learn-svm/</link>
      <pubDate>Sat, 12 Nov 2016 18:41:26 +0900</pubDate>
      
      <guid>https://mayoyamasaki.github.io/content/post/a-benchmark-of-scikit-learn-svm/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Baggingと多項式カーネルを使ったSVMが、精度と学習及び予測速度の観点で、良さそうであった。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;あるシステムの実行速度が遅く、プロファイルしてみたところ、SVMがボトルネックになっていた。
他の処理(別の学習器も含む)と比較しても数十〜数百倍、学習と推定が遅かったので、&lt;a href=&#34;http://scikit-learn.org/stable/&#34;&gt;scikit-learn&lt;/a&gt;のSVMのベンチマークを取ってみた。&lt;/p&gt;

&lt;h2 id=&#34;設定&#34;&gt;設定&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;SVM実装は、SVC(rbf, poly), LinearSVCを使用した。&lt;/li&gt;
&lt;li&gt;OneVsRestの多クラス分類で、irisデータセットを使用した。&lt;/li&gt;
&lt;li&gt;それぞれについて、BaggingClassifierを使ったアンサンブルを試した。&lt;/li&gt;
&lt;li&gt;ついでに、RandomForestClassifierも試した。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;実装&#34;&gt;実装&lt;/h2&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;time&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; defaultdict
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; cycle

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;plt&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numpy&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;np&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;sklearn.ensemble&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; BaggingClassifier
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;sklearn.ensemble&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; RandomForestClassifier
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;sklearn&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; datasets
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;sklearn.multiclass&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; OneVsRestClassifier
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;sklearn.svm&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; SVC
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;sklearn.svm&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; LinearSVC
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;sklearn.metrics&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; f1_score
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;sklearn.model_selection&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; train_test_split


&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;load_dataset&lt;/span&gt;():
    X, y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; datasets&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;load_iris(return_X_y&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;True&lt;/span&gt;)
    X &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;repeat(X, &lt;span style=&#34;color: #666666&#34;&gt;300&lt;/span&gt;, axis&lt;span style=&#34;color: #666666&#34;&gt;=0&lt;/span&gt;)
    y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;repeat(y, &lt;span style=&#34;color: #666666&#34;&gt;300&lt;/span&gt;, axis&lt;span style=&#34;color: #666666&#34;&gt;=0&lt;/span&gt;)
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; X, y


&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;timeit&lt;/span&gt;(func, args):
    start &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;clock()
    results &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; func(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;args)
    end &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;clock()
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; results, end&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;start


&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;make_clfs&lt;/span&gt;():
    classifiers &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; []
    SVCs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; (
        (SVC(kernel&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;linear&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;SVC,linear&amp;#39;&lt;/span&gt;),
        (SVC(kernel&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;rbf&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;SVC,rbf&amp;#39;&lt;/span&gt;),
        (SVC(kernel&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;poly&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;SVC,poly&amp;#39;&lt;/span&gt;),
    )
    classifiers&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;extend(
        [(OneVsRestClassifier(estimater), &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;OvR&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;title)
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; estimater,title &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; SVCs])
    classifiers&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;extend(
        [(OneVsRestClassifier(
            BaggingClassifier(estimater, max_samples&lt;span style=&#34;color: #666666&#34;&gt;=0.1&lt;/span&gt;)), &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;OvR,Bagging,&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;title)
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; estimater,title &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; SVCs])
    classifiers&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;append((LinearSVC(), &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;LinearSVC&amp;#39;&lt;/span&gt;))
    classifiers&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;append((RandomForestClassifier(), &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;RandomForest&amp;#39;&lt;/span&gt;))
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; classifiers


&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;sample&lt;/span&gt;(X, y, train_size):
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; train_size &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1.&lt;/span&gt;: &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; X, y
    _X, _, _y, _  &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; train_test_split(X, y, train_size&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;train_size, random_state&lt;span style=&#34;color: #666666&#34;&gt;=0&lt;/span&gt;)
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; _X, _y


&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;plot&lt;/span&gt;(graph_title, train_sizes, dic):
    colors &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; cycle([&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;m&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;k&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;])
    plt&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;figure()
    plt&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;title(graph_title)
    plt&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Training examples&amp;quot;&lt;/span&gt;)
    plt&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;ylabel(graph_title)
    plt&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;grid()

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; label, vals &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; dic&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;items():
        plt&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;plot(train_sizes, vals, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;o-&amp;#39;&lt;/span&gt;, color&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;next&lt;/span&gt;(colors), label&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;label)
    plt&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;legend(loc&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;best&amp;quot;&lt;/span&gt;)
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; plt


&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;():
    CV&lt;span style=&#34;color: #666666&#34;&gt;=5&lt;/span&gt;
    X, y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; load_dataset()
    classifiers &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; make_clfs()
    train_sizes &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;linspace(&lt;span style=&#34;color: #666666&#34;&gt;.1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;)
    fit_times &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; defaultdict(&lt;span style=&#34;color: #008000&#34;&gt;list&lt;/span&gt;)
    pred_times &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; defaultdict(&lt;span style=&#34;color: #008000&#34;&gt;list&lt;/span&gt;)
    fscores &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; defaultdict(&lt;span style=&#34;color: #008000&#34;&gt;list&lt;/span&gt;)

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; train_size &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; train_sizes:
        _X, _y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; sample(X, y, train_size)
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; clf, title &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; classifiers:
            scores &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;fit&amp;#39;&lt;/span&gt;:[], &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;pred&amp;#39;&lt;/span&gt;:[], &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;fscore&amp;#39;&lt;/span&gt;:[] }
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; n_cv &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;range&lt;/span&gt;(CV):
                X_train, X_test, y_train, y_test &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; train_test_split(
                    _X, _y, test_size&lt;span style=&#34;color: #666666&#34;&gt;=0.4&lt;/span&gt;, random_state&lt;span style=&#34;color: #666666&#34;&gt;=0&lt;/span&gt;)

                _, t &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; timeit(clf&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;fit, (X_train, y_train))
                scores[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;fit&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;append(t)

                y_pred, t &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; timeit(clf&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;predict, (X_test, ))
                scores[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;pred&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;append(t)

                fscore &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; f1_score(y_test, y_pred, average&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;macro&amp;#39;&lt;/span&gt;)
                scores[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;fscore&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;append(fscore)

            fit_times[title]&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;mean(scores[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;fit&amp;#39;&lt;/span&gt;]))
            pred_times[title]&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;mean(scores[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;pred&amp;#39;&lt;/span&gt;]))
            fscores[title]&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;mean(scores[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;fscore&amp;#39;&lt;/span&gt;]))

    plot(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Fscores&amp;#39;&lt;/span&gt;, train_sizes, fscores)
    plot(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Time of Training&amp;#39;&lt;/span&gt;, train_sizes, fit_times)
    plot(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Time of Predication&amp;#39;&lt;/span&gt;, train_sizes, pred_times)
    plt&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;show()


&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    main()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;make_clfs&lt;/code&gt;で作成した分類器一つ一つに対して、学習時間、推測時間、F値(マクロ平均)を求めている。
尚、これらの値は5回施行の平均値であり、データ量増加に対する、推移を見ている。&lt;/p&gt;

&lt;h2 id=&#34;結果&#34;&gt;結果&lt;/h2&gt;

&lt;h3 id=&#34;f値&#34;&gt;F値&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://mayoyamasaki.github.io/images/a-benchmark-of-scikit-learn-svm/fscores.png&#34; alt=&#34;fscores&#34; /&gt;&lt;/p&gt;

&lt;p&gt;一瞬見失うが、RandomForestの精度が最も高く、非線形カーネル、線形カーネルの順番に精度が高かった。
また、Baggingを加えても非線形カーネルではほとんど差が出ていない。&lt;/p&gt;

&lt;h3 id=&#34;学習時間&#34;&gt;学習時間&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://mayoyamasaki.github.io/images/a-benchmark-of-scikit-learn-svm/trains.png&#34; alt=&#34;trains&#34; /&gt;
多項式カーネルでは、Baggingの効果が顕著にでている。また、SVCの線形カーネルは話に聞く通り低パフォーマンスで、LinearSVCの方が学習時間は少ない。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;単位記述を忘れたが、縦軸は[s]である。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;予測時間&#34;&gt;予測時間&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://mayoyamasaki.github.io/images/a-benchmark-of-scikit-learn-svm/preds.png&#34; alt=&#34;preds&#34; /&gt;
予測時間では、一転してBaggingを使用しない方が速度がでている傾向にある。また、推測においてもSVCの線形カーネルのパフォーマンスは低い。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;この手のベンチマークはデータセットに依存するが、今回の評価では、SVMの中では、Baggingを使った多項式カーネルによるOneVsRestが有効であった。&lt;br /&gt;
今回の様に汎化しやすそうなデータセットでは、やはりRandomForestは有効で、今後は、多様なデータセットでの検証をやってみたい。&lt;br /&gt;
また、Baggingやアンサンブル学習を初めて試してみたが、実行速度改善に大きく寄与したので、実システムでも試してみたい。尚、Baggingについは、アンサンブル学習のスライドが分かりやすかった&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;http://www.slideshare.net/holidayworking/ss-11948523&#34;&gt;アンサンブル学習&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>HTML to TEXT for NLP</title>
      <link>https://mayoyamasaki.github.io/content/post/html-to-text-for-nlp/</link>
      <pubDate>Fri, 04 Nov 2016 21:52:39 +0900</pubDate>
      
      <guid>https://mayoyamasaki.github.io/content/post/html-to-text-for-nlp/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;「HTMLからテキストを取り出す」というタスクは、一見簡単の様で難しい。&lt;br /&gt;
特に、後続するテキスト処理(文分割や形態素解析、構文解析)を上手くしようとすると難しい。&lt;br /&gt;
ここでは、英語文書に対して、ナイーブなルールで、テキスト抽出をそこそこ上手くやる方法を紹介する。&lt;/p&gt;

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;この記事では、Github上で公開している実装の簡単な紹介をする&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;使い方は、以下のようにコマンドラインツールとして使ったり、&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;python3 html2text.py https://example.com &amp;gt; example.com.txt
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pythonを通して利用できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ python3
&amp;gt;&amp;gt;&amp;gt; import html2text
&amp;gt;&amp;gt;&amp;gt; &lt;span style=&#34;color: #19177C&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; html2text.url2html&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;https://example.com&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span style=&#34;color: #19177C&#34;&gt;bodyhtml&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; html2text.html2body&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;html&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span style=&#34;color: #19177C&#34;&gt;text&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; html2text.html2text&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;bodyhtml&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;実装&#34;&gt;実装&lt;/h2&gt;

&lt;h3 id=&#34;スペースの統一&#34;&gt;スペースの統一&lt;/h3&gt;

&lt;p&gt;タブ文字、&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%8E%E3%83%BC%E3%83%96%E3%83%AC%E3%83%BC%E3%82%AF%E3%82%B9%E3%83%9A%E3%83%BC%E3%82%B9&#34;&gt;NBSP&lt;/a&gt;&lt;code&gt;\xa0&lt;/code&gt;等を半角スペースに置換する。
NBSPは、よく構文解析などが例外を吐くので注意。&lt;/p&gt;

&lt;h3 id=&#34;ブロックタグ削除の影響&#34;&gt;ブロックタグ削除の影響&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;foo.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;bar&lt;/code&gt;の様なケースでは、単に削除すると、&lt;code&gt;foo.bar&lt;/code&gt;となり、TokenizeやSentence segmentationで失敗する原因になる。また&lt;code&gt;foo.&amp;lt;/div&amp;gt;bar&lt;/code&gt;の様なケースもあるので、単にブロックタグの連接だけでなく、ブロックタグの直後に空白や改行無しに、文字が連接するかをチェックする必要がある。&lt;br /&gt;
ここでは、前者に対しては改行、後者に対してはスペースを挿入することで対処している。&lt;/p&gt;

&lt;h3 id=&#34;タグ削除による影響&#34;&gt;タグ削除による影響&lt;/h3&gt;

&lt;p&gt;ブロックタグに限らず、CSSでblockやinline-block等をしていしているインラインタグでも、同種の影響がでる。もっと言えば、HTML&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://github.com/mayoyamasaki/html2text&#34;&gt;https://github.com/mayoyamasaki/html2text&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Team Geek</title>
      <link>https://mayoyamasaki.github.io/content/post/team-geak/</link>
      <pubDate>Wed, 19 Oct 2016 23:01:58 +0900</pubDate>
      
      <guid>https://mayoyamasaki.github.io/content/post/team-geak/</guid>
      <description>

&lt;h2 id=&#34;書評-team-geek-googleのギークたちはいかにしてチームを作るのか&#34;&gt;書評：Team Geek――Googleのギークたちはいかにしてチームを作るのか&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.amazon.co.jp/Team-Geek-_Google%E3%81%AE%E3%82%AE%E3%83%BC%E3%82%AF%E3%81%9F%E3%81%A1%E3%81%AF%E3%81%84%E3%81%8B%E3%81%AB%E3%81%97%E3%81%A6%E3%83%81%E3%83%BC%E3%83%A0%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%AE%E3%81%8B-Brian-Fitzpatrick/dp/4873116309/ref=as_li_ss_il?ie=UTF8&amp;qid=1476885816&amp;sr=8-1&amp;keywords=team+geek&amp;linkCode=li3&amp;tag=mayo0e-22&amp;linkId=e028d7f74a59bf4178485952e61b8708&#34; target=&#34;_blank&#34;&gt;
&lt;img border=&#34;0&#34; src=&#34;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=4873116309&amp;Format=_SL250_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=mayo0e-22&#34; style=&#34;margin-left: 0;&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://ir-jp.amazon-adsystem.com/e/ir?t=mayo0e-22&amp;l=li3&amp;o=9&amp;a=4873116309&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;本書にあるように素晴らしい文化を構築するための重要なポイントの一つは、目標や方向性、価値基準などをチームで「共有」することである。
しかしながら、僕が思うに「真にこの本読むべき人は、これを読まない」ため、良き文化の共有は、良き文化の無いチームでは難しく、この慣性がこの問題の根幹ではないかと思う。
やれるだけのことをやってダメな時は、本書の言葉を借りるならプランB、つまり「逃げる」しかない。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;「すべてやっているけど、一向に改善されないし、うまくいかない」答えは単純だ。君ができることはもう残されていない。あとは被害者にならないように、そこから逃げ出そう。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;さて、本書で紹介されている素晴らしい文化に関するノウハウは、「この本を読む人」かで聞いたことがある内容も多いかもしれないが、実際的なトピックスが多く、あらためて体系的に読んでみることで、自分の中の課題をいくつも発見することができ、非常に良い体験になった。&lt;/p&gt;

&lt;p&gt;本書を読むことで、より多くの人で、素晴らしい文化の構築に寄与できるようになるのではないかと思う。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rust inside Python for using hyper HTTP client</title>
      <link>https://mayoyamasaki.github.io/content/post/rust-inside-python-for-using-hyper-http-client/</link>
      <pubDate>Sat, 24 Sep 2016 17:27:31 +0900</pubDate>
      
      <guid>https://mayoyamasaki.github.io/content/post/rust-inside-python-for-using-hyper-http-client/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rust-lang.org&#34;&gt;Rust&lt;/a&gt;の&lt;a href=&#34;https://ja.wikipedia.org/wiki/Foreign_function_interface&#34;&gt;FFI(Foreign Function Interface)&lt;/a&gt;を用いて、Rustの関数をPythonから利用する。&lt;/li&gt;
&lt;li&gt;この関数では、Rust向けのHTTPライブラリ&lt;a href=&#34;https://github.com/hyperium/hyper&#34;&gt;hyper&lt;/a&gt;を利用して、受け取ったURLリストのHTMLを並行処理で取得する。&lt;/li&gt;
&lt;li&gt;これらのプログラムは、Mac OS X 10.11.6上で、動作を確認している。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;Rust言語は、安全性、速度、並行性を目標に掲げたシステムレベルのプログラミング言語である。
Rustの並行処理では、Python等の言語で見られる&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%97%E3%83%AA%E3%82%BF%E3%83%AD%E3%83%83%E3%82%AF&#34;&gt;GIL(Global Interpreter Lock)&lt;/a&gt;の制約がなく、高い並行性を実現している&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
この記事では、Rustで記述した並行処理の関数を、Pythonから実行し、RustのFFIや並行処理についてのサンプルプログラムを示すことを目的としている。
基本的なRustプログラミングとFFIの使用法については、参考サイトを参照されたい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
尚、紹介するサンプルプログラムでは、基本的にエラー処理を割愛している。&lt;/p&gt;

&lt;p&gt;以下に解説するプログラムはGithub上に公開している&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;環境と依存&#34;&gt;環境と依存&lt;/h2&gt;

&lt;p&gt;この記事では、Rust 1.10とPython 3.5、および、以下のクレートを使用している。
尚、OS X上でhyperクレートを使用する場合は、hyperがrust-opensslを使用しているため、opensslへの環境変数の設定が必要&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;パッケージ名&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;hyper&lt;/td&gt;
&lt;td&gt;0.9.10&lt;/td&gt;
&lt;td&gt;HTTPクライアント&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;libc&lt;/td&gt;
&lt;td&gt;0.2.16&lt;/td&gt;
&lt;td&gt;FFI&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;rustc-serialize&lt;/td&gt;
&lt;td&gt;0.3&lt;/td&gt;
&lt;td&gt;jsonエンコード&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;ffi-あるいはpythonからのrustの利用&#34;&gt;FFI、あるいはPythonからのRustの利用&lt;/h2&gt;

&lt;p&gt;まず初めに、Rust側の関数は以下のように定義した。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// src/lib.rs&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;pub&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extern&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fn&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;get_htmls_from(urls&lt;span style=&#34;color: #666666&#34;&gt;:*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;c_char,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;lenght&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;size_t)&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;mut&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;c_char&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;...&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;引数は、Pythonにおける以下のような文字列のリストで、Rust側ではc言語の文字型&lt;code&gt;c_char&lt;/code&gt;のポインタのポインタとして定義している。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# src/main.py&lt;/span&gt;
urls &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; [
    b&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;http://example.com/&amp;quot;&lt;/span&gt;,
    b&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;https://www.yahoo.com/&amp;quot;&lt;/span&gt;,
]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Rust側で受け取った&lt;code&gt;*const *const c_char&lt;/code&gt;は、次の手続きで、&lt;code&gt;String&lt;/code&gt;に変換できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// src/lib.rs&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;urls&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;unsafe&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;slice&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;from_raw_parts(urls,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;lenght&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;usize&lt;/span&gt;)&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;};&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;urls&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;Vec&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;urls.iter()&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;.map(&lt;span style=&#34;color: #666666&#34;&gt;|&amp;amp;&lt;/span&gt;p&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;unsafe&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;CStr&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;from_ptr(p)&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;})&lt;span style=&#34;color: #bbbbbb&#34;&gt;         &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// make iter of &amp;amp;CStr&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;.map(&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;cs&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;cs.to_bytes())&lt;span style=&#34;color: #bbbbbb&#34;&gt;                        &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// make iter of &amp;amp;[u8]&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;.map(&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;bs&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;from_utf8(bs).unwrap_or(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;))&lt;span style=&#34;color: #bbbbbb&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// make iter of &amp;amp;str&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;.map(&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;s&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;s.to_string())&lt;span style=&#34;color: #bbbbbb&#34;&gt;                         &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// make iter of String&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;.collect();&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;FFIでは引数や戻り値の構造が複雑になるに従い、その扱いが難しくなる。そのため、このサンプルプログラムでは、戻り値はjson形式の文字列として定義している。戻り値のjsonは、keyがURL、valueがHTMLのHashMapを単にjson形式に変換したものである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// src/lib.rs&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;mut&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;url2bodies&lt;span style=&#34;color: #bbbbbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;HashMap&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;new();&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;...&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;result&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;json&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;encode(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;url2bodies).unwrap();&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;CString&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;new(result).unwrap().into_raw()&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// return value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;このように定義したRustの関数は、Cargo.tomlにlibの設定を記述し、&lt;code&gt;cargo build --release&lt;/code&gt;することで、&lt;code&gt;target/release/&lt;/code&gt;以下に、実行環境に合わせて、DLL(Dynamic Link Library)が生成される。&lt;/p&gt;

&lt;p&gt;Mac OS X上では、dylibが生成され、以下のようなプログラムで、DLLから関数の呼び出しを行う。PythonからRustで生成したdylibを扱うには、C言語の場合と同様で、&lt;code&gt;ctypes&lt;/code&gt;ライブラリを用いる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# src/main.py&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;get_htmls_as_dict_from&lt;/span&gt;(urls):
    &lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;&amp;quot;&amp;quot;&amp;quot; get html content using rust&amp;#39;s dylib concurrently &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    DYLIB_PATH &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;target/release/libhyper_thread.dylib&amp;quot;&lt;/span&gt;
    lib &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ctypes&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;cdll&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;LoadLibrary(DYLIB_PATH)
    C_CHAR_P_P &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ctypes&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;c_char_p &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;len&lt;/span&gt;(urls)
    c_urls &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; C_CHAR_P_P(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;urls)
    lib&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;get_htmls_from&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;argtypes &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; (C_CHAR_P_P, ctypes&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;c_size_t)
    lib&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;get_htmls_from&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;restype &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ctypes&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;c_void_p
    htmls &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; lib&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;get_htmls_from(c_urls, &lt;span style=&#34;color: #008000&#34;&gt;len&lt;/span&gt;(urls))
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; json&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;loads(ctypes&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;cast(htmls, ctypes&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;c_char_p)&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;value&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;))
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;except&lt;/span&gt;:
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;hyperと並行処理&#34;&gt;hyperと並行処理&lt;/h2&gt;

&lt;p&gt;Rustの並行処理ではチャネルを用いて、URLから取得したHTMLをsendしている。hyperによるGETリクエストでは、あらかじめURL structに変換してから、クエリをsendし、戻り値のレスポンスをStringに変換している。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// src/lib.rs&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;(tx,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;rx)&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;mpsc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;channel();&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;url&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;urls.iter()&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;url&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;url.clone();&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;tx&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;tx.clone();&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;thread&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;spawn(move&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;||&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;client&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;new();&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;mut&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;html&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;new();&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;match&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;Url&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;parse(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;url)&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;                &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;Result&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;Err&lt;/span&gt;(_)&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{},&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;                &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;Result&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;Ok&lt;/span&gt;(hyper_url)&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;                    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;match&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;client.get(hyper_url).send()&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;                        &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;Result&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;Err&lt;/span&gt;(_)&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{},&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;                        &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;Result&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;Ok&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;mut&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;res)&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;                            &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;match&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;res.read_to_string(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;mut&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;html)&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;                                &lt;/span&gt;_&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;                            &lt;/span&gt;}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;                        &lt;/span&gt;}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;                    &lt;/span&gt;}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;                &lt;/span&gt;}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;            &lt;/span&gt;};&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;            &lt;/span&gt;tx.send((url,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;html)).unwrap();&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;});&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;最後に、全てのrxで受け取った値をHashMapにinsertする。尚、recvする順序は不定のためkeyとなるURLもsendしている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// src/lib.rs&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;_&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;urls.iter()&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;match&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;rx.recv()&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;Result&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;Ok&lt;/span&gt;((url,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;html))&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;url2bodies.insert(url,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;html);&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;},&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;Result&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;Err&lt;/span&gt;(_)&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;この記事では、PythonからRustの並行処理を利用するためのサンプルプログラムを紹介し、題材としてhyperのHTTPクライアントを扱った。
PythonからRustで生成したDLLを使用する際は、それぞれctypesとlibc/ffiを使用するため、C言語での値の受渡しを考える必要があり、単にPythonからC言語で生成したDLLを使用するのに比べて関心ごとが増えてしまう。
なので、モダンな言語使用を持つRustが、C言語に比べてある程度有効な場合においては、Python/Cの代わりにPython/Rustを検討してみるのはありかもしれない。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/rust-inside-other-languages.html&#34;&gt;Rust Inside Other Languages&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/README.html&#34;&gt;プログラミング言語Rust&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;&lt;a href=&#34;http://jakegoulding.com/rust-ffi-omnibus/&#34;&gt;The Rust FFI Omnibus&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;&lt;a href=&#34;https://github.com/mayoyamasaki/sample-hyper-thread&#34;&gt;sample-hyper-thread&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;&lt;a href=&#34;https://github.com/sfackler/rust-openssl&#34;&gt;rust-openssl&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6&#34;&gt;&lt;a href=&#34;http://docs.python.jp/3.5/library/ctypes.html&#34;&gt;16.16. ctypes — Pythonのための外部関数ライブラリ&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Assembly on Mac OS X 101</title>
      <link>https://mayoyamasaki.github.io/content/post/assembly-on-mac-os-x-101/</link>
      <pubDate>Sun, 14 Aug 2016 18:52:46 +0800</pubDate>
      
      <guid>https://mayoyamasaki.github.io/content/post/assembly-on-mac-os-x-101/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;アセンブリ言語は、&lt;a href=&#34;https://ja.wikipedia.org/wiki/X64&#34;&gt;x86-64&lt;/a&gt;を使用する。&lt;/li&gt;
&lt;li&gt;アセンブラは、&lt;a href=&#34;http://www.nasm.us/&#34;&gt;NASM(Netwide Assembler)&lt;/a&gt;を使用する。&lt;/li&gt;
&lt;li&gt;OS X上での「Hello World」と「C言語からの関数呼び出し」のサンプルコードを紹介する。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;アセンブリ言語は、命令セットアーキテクチャ(x86、ARMなど)やアセンブラ(NASM、&lt;a href=&#34;https://ja.wikipedia.org/wiki/GNU%E3%82%A2%E3%82%BB%E3%83%B3%E3%83%96%E3%83%A9&#34;&gt;GAS&lt;/a&gt;)が採用する構文(Intel、AT&amp;amp;T)、bit数に従って、若干異なる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;br /&gt;
この記事では、64bitのx86-64(x64)のアセンブリ言語を、NASM(Intel構文)を用いてOS Xの実行ファイル形式Mach-Oに変換する。&lt;/p&gt;

&lt;p&gt;この記事のプログラムは、OS X EL Capitan上にて確認している。実行に際して必要になるものはgccとld、NASMだけであり、NASMはbrewを使って簡単にインストールすることができる。&lt;/p&gt;

&lt;h2 id=&#34;hello-world&#34;&gt;Hello World&lt;/h2&gt;

&lt;p&gt;以下に、Hello Worldのプログラムを示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;; helloworld.asm&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;GLOBAL&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;start&lt;/span&gt;


&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;SECTION&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;.data&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;str_hello&lt;/span&gt;   &lt;span style=&#34;color: #19177C&#34;&gt;db&lt;/span&gt;  &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0x0a&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;; Output string and \n&lt;/span&gt;


&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;SECTION&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;.text&lt;/span&gt;
&lt;span style=&#34;color: #A0A000&#34;&gt;start:&lt;/span&gt;
    &lt;span style=&#34;color: #0000FF&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;rax&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0x2000004&lt;/span&gt;      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;; Set system call to write=4.&lt;/span&gt;
    &lt;span style=&#34;color: #0000FF&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;rdi&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;; Set output to stdout.&lt;/span&gt;
    &lt;span style=&#34;color: #0000FF&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;rsi&lt;/span&gt;, &lt;span style=&#34;color: #19177C&#34;&gt;str_hello&lt;/span&gt;      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;; Set output data.&lt;/span&gt;
    &lt;span style=&#34;color: #0000FF&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;rdx&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;13&lt;/span&gt;             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;; Set output data size.&lt;/span&gt;
    &lt;span style=&#34;color: #0000FF&#34;&gt;syscall&lt;/span&gt;                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;; Call system call.&lt;/span&gt;
    &lt;span style=&#34;color: #0000FF&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;rax&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0x2000001&lt;/span&gt;      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;; Set system call to exit=1.&lt;/span&gt;
    &lt;span style=&#34;color: #0000FF&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;rdi&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;; Set success value of exit.&lt;/span&gt;
    &lt;span style=&#34;color: #0000FF&#34;&gt;syscall&lt;/span&gt;                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;; Call system call.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ここでは、アセンブリ言語の詳細は解説しない。詳しは入門サイトなどを参照されたい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;このプログラムは、下記の手続きで実行できる。 &lt;code&gt;-f&lt;/code&gt;は、出力する実行ファイルのフォーマットを指定している。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ nasm -f macho64 helloworld.asm
$ ld -o helloworld helloworld.o
$ ./helloworld
Hello World
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;c言語からの関数呼び出し&#34;&gt;C言語からの関数呼び出し&lt;/h2&gt;

&lt;p&gt;アセンブリ言語で記述した関数を、C言語とリンクして実行する。&amp;ndash;
以下に、アセンブリ言語で記述した二乗関数(square)のプログラムを示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;GLOBAL&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;_square&lt;/span&gt;

&lt;span style=&#34;color: #A0A000&#34;&gt;_square:&lt;/span&gt;
    &lt;span style=&#34;color: #0000FF&#34;&gt;push&lt;/span&gt;    &lt;span style=&#34;color: #008000&#34;&gt;rbp&lt;/span&gt;
    &lt;span style=&#34;color: #0000FF&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color: #008000&#34;&gt;rbp&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;rsp&lt;/span&gt;
    &lt;span style=&#34;color: #0000FF&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color: #008000&#34;&gt;rax&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;rdi&lt;/span&gt;
    &lt;span style=&#34;color: #0000FF&#34;&gt;imul&lt;/span&gt;    &lt;span style=&#34;color: #008000&#34;&gt;rax&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;rdi&lt;/span&gt;
    &lt;span style=&#34;color: #0000FF&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color: #008000&#34;&gt;rsp&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;rbp&lt;/span&gt;
    &lt;span style=&#34;color: #0000FF&#34;&gt;pop&lt;/span&gt;     &lt;span style=&#34;color: #008000&#34;&gt;rbp&lt;/span&gt;
    &lt;span style=&#34;color: #0000FF&#34;&gt;ret&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;次に呼び出す側のCプログラムを示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;square&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;);

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;)
{
    printf(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;%d&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;, square(&lt;span style=&#34;color: #666666&#34;&gt;12&lt;/span&gt;));
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これらのプログラム配下の様にして実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ nasm -f macho64 square.asm
$ gcc -o main main.c square.o
$ ./main
144
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;おわりに&#34;&gt;おわりに&lt;/h3&gt;

&lt;p&gt;この記事では、OS X上でのX86アセンブリ言語の実行方法と、C言語とのリンク方法について紹介した。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;http://www.ibm.com/developerworks/jp/linux/library/l-gas-nasm.html&#34;&gt;Linux のアセンブラー: GAS と NASM を比較する&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;http://www5c.biglobe.ne.jp/~ecb/assembler/assembler00.html&#34;&gt;アセンブラ入門&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;&lt;a href=&#34;http://homepage1.nifty.com/herumi/prog/x64.html#GCC64&#34;&gt;x64 アセンブリ言語プログラミング&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>